import TelegramBot from 'node-telegram-bot-api';
import { config } from '../config/env';
import { logger } from '../utils/logger';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å (master) —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç–æ–º –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
 */
export class TelegramBotService {
	private bot: TelegramBot | null = null;
	private isClusterMaster: boolean;

	constructor() {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å master –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
		this.isClusterMaster = !process.env.pm_id || process.env.pm_id === '0';

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ
		if (this.isClusterMaster) {
			logger.info(
				'ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ',
				'TELEGRAM_BOT',
			);
			this.initializeBot();
		} else {
			logger.info(
				`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å ${process.env.pm_id} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –±–æ—Ç–∞`,
				'TELEGRAM_BOT',
			);
		}
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ)
	 */
	private initializeBot() {
		try {
			this.bot = new TelegramBot(config.telegram.botToken, {
				polling: true,
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
				request: {
					url: '',
					agentOptions: {
						keepAlive: true,
						family: 4, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ IPv4
					},
				} as any,
			});

			this.setupCommands();
			this.setupErrorHandlers();

			logger.info('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'TELEGRAM_BOT');
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:',
				'TELEGRAM_BOT',
				error,
			);
		}
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
	 */
	private setupErrorHandlers() {
		if (!this.bot) return;

		this.bot.on('error', (error) => {
			logger.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', 'TELEGRAM_BOT', error);
		});

		this.bot.on('polling_error', (error) => {
			logger.error('‚ùå –û—à–∏–±–∫–∞ polling Telegram –±–æ—Ç–∞:', 'TELEGRAM_BOT', error);
		});

		// Graceful restart –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
		this.bot.on('webhook_error', (error) => {
			logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook:', 'TELEGRAM_BOT', error);
		});
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
	 */
	private setupCommands() {
		if (!this.bot) return;

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
		this.bot.onText(/\/start/, async (msg) => {
			try {
				const chatId = msg.chat.id;
				const userName =
					msg.from?.username || msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

				logger.info(
					`üì± –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName} (${chatId})`,
					'TELEGRAM_BOT',
				);
				await this.sendWebAppButton(chatId);
			} catch (error) {
				logger.error(
					'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:',
					'TELEGRAM_BOT',
					error,
				);
			}
		});

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
		this.bot.on('message', async (msg) => {
			if (msg.text && !msg.text.startsWith('/start')) {
				try {
					const chatId = msg.chat.id;
					await this.sendWebAppButton(chatId);
				} catch (error) {
					logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', 'TELEGRAM_BOT', error);
				}
			}
		});
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	 */
	private async sendWebAppButton(chatId: number) {
		if (!this.bot) {
			logger.warn(
				'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
				'TELEGRAM_BOT',
			);
			return;
		}

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram (https)
			let messageText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Myach Pro! ‚öΩ';
			let markup: any = {};

			// URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https:// –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp
			if (config.webApp.url.startsWith('https://')) {
				messageText += '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç:';
				const inlineKeyboard = [
					[
						{
							text: 'üéØ –û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç',
							web_app: { url: config.webApp.url },
						},
					],
				];
				markup = { reply_markup: { inline_keyboard: inlineKeyboard } };
			} else {
				// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
				messageText += `\n\nüîó –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${config.webApp.url}\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: WebApp –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å HTTPS URL`;
			}

			await this.bot.sendMessage(chatId, messageText, markup);
			logger.info(
				`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`,
				'TELEGRAM_BOT',
			);
		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', 'TELEGRAM_BOT', error);
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —à—ç—Ä–∏–Ω–≥–∞)
	 */
	public async sendImage(
		chatId: number,
		imageBuffer: Buffer,
		caption?: string,
	): Promise<boolean> {
		if (!this.bot) {
			logger.warn(
				'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
				'TELEGRAM_BOT',
			);
			return false;
		}

		try {
			await this.bot.sendPhoto(chatId, imageBuffer, {
				caption: caption || '–í–∞—à —Ç–∏—Ä-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤! üéØ',
			});

			logger.info(
				`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`,
				'TELEGRAM_BOT',
			);
			return true;
		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', 'TELEGRAM_BOT', error);
			return false;
		}
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null –≤ worker –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö)
	 */
	public getBot(): TelegramBot | null {
		return this.bot;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
	 */
	public isBotAvailable(): boolean {
		return this.isClusterMaster && this.bot !== null;
	}

	/**
	 * Graceful shutdown –±–æ—Ç–∞
	 */
	public async shutdown(): Promise<void> {
		if (this.bot && this.isClusterMaster) {
			logger.info('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...', 'TELEGRAM_BOT');
			try {
				await this.bot.stopPolling();
				logger.info('‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'TELEGRAM_BOT');
			} catch (error) {
				logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', 'TELEGRAM_BOT', error);
			}
		}
	}
}
