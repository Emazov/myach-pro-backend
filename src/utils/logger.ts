enum LogLevel {
	ERROR = 'error',
	WARN = 'warn',
	INFO = 'info',
	DEBUG = 'debug',
}

interface LogEntry {
	level: LogLevel;
	message: string;
	timestamp: string;
	context?: string;
	error?: any;
}

class Logger {
	private isProduction = process.env.NODE_ENV === 'production';
	private shouldLogDebug = process.env.DEBUG === 'true';

	private formatLog(entry: LogEntry): string {
		const { level, message, timestamp, context, error } = entry;

		if (this.isProduction) {
			// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
			return JSON.stringify({
				level,
				message,
				timestamp,
				context,
				...(error && { error: error.message, stack: error.stack }),
			});
		} else {
			// –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
			const prefix = context ? `[${context}]` : '';
			return `${timestamp} ${level.toUpperCase()} ${prefix} ${message}${
				error ? ` - ${error.message}` : ''
			}`;
		}
	}

	private log(level: LogLevel, message: string, context?: string, error?: any) {
		// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –ª–æ–≥–∏
		if (this.isProduction && level === LogLevel.DEBUG) {
			return;
		}

		// –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º debug —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Ñ–ª–∞–≥–µ
		if (
			!this.isProduction &&
			level === LogLevel.DEBUG &&
			!this.shouldLogDebug
		) {
			return;
		}

		const entry: LogEntry = {
			level,
			message,
			timestamp: new Date().toISOString(),
			context,
			error,
		};

		const formattedLog = this.formatLog(entry);

		switch (level) {
			case LogLevel.ERROR:
				console.error(formattedLog);
				break;
			case LogLevel.WARN:
				console.warn(formattedLog);
				break;
			case LogLevel.INFO:
				console.log(formattedLog);
				break;
			case LogLevel.DEBUG:
				console.debug(formattedLog);
				break;
		}
	}

	error(message: string, context?: string, error?: any) {
		this.log(LogLevel.ERROR, message, context, error);
	}

	warn(message: string, context?: string) {
		this.log(LogLevel.WARN, message, context);
	}

	info(message: string, context?: string) {
		this.log(LogLevel.INFO, message, context);
	}

	debug(message: string, context?: string) {
		this.log(LogLevel.DEBUG, message, context);
	}

	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
	startup(message: string) {
		this.info(`üöÄ ${message}`, 'STARTUP');
	}

	shutdown(message: string) {
		this.info(`üîª ${message}`, 'SHUTDOWN');
	}

	performance(message: string, duration?: number) {
		if (duration && duration > 500) {
			this.warn(`‚ö†Ô∏è ${message} (${duration}ms)`, 'PERFORMANCE');
		}
	}
}

export const logger = new Logger();
