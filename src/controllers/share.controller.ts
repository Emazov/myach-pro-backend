import { Request, Response } from 'express';
import {
	imageGenerationService,
	ShareImageData,
} from '../services/imageGeneration.service';
import TelegramBot from 'node-telegram-bot-api';
import { initDataUtils } from '../utils/initDataUtils';
import { config } from '../config/env';
import { Readable } from 'stream';
import fs from 'fs';
import path from 'path';
import { logger } from '../utils/logger';

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —à–∞—Ä–∏–Ω–≥–∞
 */
export class ShareController {
	private bot: TelegramBot;

	constructor() {
		this.bot = new TelegramBot(config.telegram.botToken);
	}

	/**
	 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram
	 */
	public shareResults = async (req: Request, res: Response) => {
		try {
			const { initData, shareData } = req.body;

			if (!initData || !shareData) {
				res.status(400).json({
					error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ',
				});
				return;
			}

			// –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData
			const validationResult = initDataUtils.validate(
				initData,
				config.telegram.botToken,
			);
			if (!validationResult.isValid) {
				res.status(401).json({
					error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
				});
				return;
			}

			const parsedData = initDataUtils.parse(initData);
			const userId = parsedData.user?.id;

			if (!userId) {
				res.status(400).json({
					error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
				});
				return;
			}

			// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			const imageData: ShareImageData = {
				categorizedPlayerIds: shareData.categorizedPlayerIds,
				categories: shareData.categories,
				clubId: shareData.clubId,
			};

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
			const { imageBuffer, club } =
				await imageGenerationService.generateResultsImage(imageData);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			const imageSizeMB = imageBuffer.length / (1024 * 1024);
			console.log(
				`–†–∞–∑–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSizeMB.toFixed(2)} MB`,
			);

			if (imageSizeMB > 10) {
				console.warn(
					'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ',
				);
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
			const caption = `üèÜ –¢–ò–†-–õ–ò–°–¢ "${club.name.toUpperCase()}"\n\n‚öΩ –°–æ–∑–¥–∞–Ω–æ –≤ @${
				config.telegram.botUsername
			}`;

			try {
				// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Stream (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)
				const imageStream = new Readable({
					read() {},
				});
				imageStream.push(imageBuffer);
				imageStream.push(null);

				await this.bot.sendPhoto(userId, imageStream, {
					caption,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '–û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç',
									web_app: { url: config.webApp.url },
								},
							],
						],
					},
				});
			} catch (streamError) {
				console.warn(
					'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Stream, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
				);

				// Fallback: —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
				const tempFileName = `tier-list-${userId}-${Date.now()}.jpg`;
				const tempFilePath = path.join(
					process.cwd(),
					'tmp',
					'uploads',
					tempFileName,
				);

				// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
				await fs.promises.writeFile(tempFilePath, imageBuffer);

				try {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
					await this.bot.sendPhoto(userId, tempFilePath, {
						caption,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '–û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç',
										web_app: { url: config.webApp.url },
									},
								],
							],
						},
					});
				} finally {
					// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
					try {
						await fs.promises.unlink(tempFilePath);
					} catch (unlinkError) {
						console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', unlinkError);
					}
				}
			}

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
			res.json({
				success: true,
				message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç',
				closeWebApp: true,
			});
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
			res.status(500).json({
				error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
			});
		}
	};

	/**
	 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∂–∞—Ç–æ–µ)
	 */
	public previewImage = async (req: Request, res: Response) => {
		try {
			const { categorizedPlayerIds, categories, clubId } = req.body;

			if (!categorizedPlayerIds || !categories || !clubId) {
				res.status(400).json({
					error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
				});
				return;
			}

			const { imageBuffer } = await imageGenerationService.generateResultsImage(
				{
					categorizedPlayerIds,
					categories,
					clubId,
				},
				{ quality: 75, width: 600, height: 800 }, // –°–∂–∞—Ç–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–≤—å—é
			);

			res.set({
				'Content-Type': 'image/jpeg',
				'Content-Length': imageBuffer.length.toString(),
				'Cache-Control': 'no-cache',
			});

			res.send(imageBuffer);
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',
				error instanceof Error ? error.message : String(error),
			);
			res.status(500).json({
				error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
			});
		}
	};

	/**
	 * –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/—à—ç—Ä–∏–Ω–≥–∞
	 */
	public downloadImage = async (req: Request, res: Response) => {
		try {
			const { categorizedPlayerIds, categories, clubId } = req.body;

			if (!categorizedPlayerIds || !categories || !clubId) {
				res.status(400).json({
					error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
				});
				return;
			}

			const { imageBuffer, club } =
				await imageGenerationService.generateResultsImage(
					{
						categorizedPlayerIds,
						categories,
						clubId,
					},
					{ quality: 95, width: 800, height: 1000 }, // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —à—ç—Ä–∏–Ω–≥–∞
				);

			// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
			const fileName = `tier-list-${club.name.replace(
				/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g,
				'-',
			)}.jpg`;

			res.set({
				'Content-Type': 'image/jpeg',
				'Content-Length': imageBuffer.length.toString(),
				'Content-Disposition': `attachment; filename="${fileName}"`,
				'Cache-Control': 'private, max-age=3600', // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ —á–∞—Å
			});

			res.send(imageBuffer);
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:',
				error instanceof Error ? error.message : String(error),
			);
			res.status(500).json({
				error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
			});
		}
	};
}

export const shareController = new ShareController();
