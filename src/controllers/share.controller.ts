import { Request, Response } from 'express';
import {
	imageGenerationService,
	ShareImageData,
} from '../services/imageGeneration.service';
import { TelegramBotService } from '../bot/telegramBot';
import { simpleBotMessagingService } from '../services/simpleBotMessaging.service';
import { initDataUtils } from '../utils/initDataUtils';
import { config } from '../config/env';
import { Readable } from 'stream';
import fs from 'fs';
import path from 'path';
import { logger } from '../utils/logger';

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —à–∞—Ä–∏–Ω–≥–∞
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
 */
export class ShareController {
	private botService: TelegramBotService;

	constructor(botService: TelegramBotService) {
		this.botService = botService;
	}

	/**
	 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram
	 */
	public shareResults = async (req: Request, res: Response) => {
		let userId: number | undefined; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ catch

		try {
			const { shareData, telegramUser } = req.body; // telegramUser –∏–∑ middleware

			// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –≤ development)
			logger.debug(
				`ShareResults –∑–∞–ø—Ä–æ—Å: user ${telegramUser?.id}`,
				'IMAGE_GENERATION',
			);

			if (!shareData) {
				res.status(400).json({
					error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
				});
				return;
			}

			if (!telegramUser || !telegramUser.id) {
				logger.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ middleware', 'AUTH');

				res.status(400).json({
					error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
				});
				return;
			}

			userId = telegramUser.id;

			// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			const imageData: ShareImageData = {
				categorizedPlayerIds: shareData.categorizedPlayerIds,
				categories: shareData.categories,
				clubId: shareData.clubId,
			};

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
			const { imageBuffer, club } =
				await imageGenerationService.generateResultsImage(imageData, {
					quality: 90, // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∫ –¥–ª—è iOS
					width: 550, // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫
					height: 800, // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
					optimizeForSpeed: false, // –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫
				});

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			const imageSizeMB = imageBuffer.length / (1024 * 1024);

			if (imageSizeMB > 10) {
				logger.warn(
					`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: ${imageSizeMB.toFixed(2)}MB`,
					'IMAGE_GENERATION',
				);
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
			const caption = `üèÜ –¢–ò–†-–õ–ò–°–¢ "${club.name.toUpperCase()}"\n\n‚öΩ –°–æ–∑–¥–∞–π —Å–≤–æ–π –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –≤\n@${
				config.telegram.botUsername
			}`;

			try {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
				if (!userId) {
					throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
				}

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
				const success = await simpleBotMessagingService.sendImage(
					userId,
					imageBuffer,
					caption,
				);

				if (!success) {
					throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
				}

				// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
				logger.imageSent(true, userId.toString(), imageBuffer.length);
			} catch (sendError) {
				// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
				logger.imageSent(false, userId?.toString());
				logger.error(
					'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
					'TELEGRAM_BOT',
					sendError as Error,
				);

				// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				throw new Error('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
			}

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
			res.json({
				success: true,
				message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç',
				closeWebApp: true,
			});
		} catch (error) {
			logger.error(
				'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
				'IMAGE_GENERATION',
				error as Error,
			);
			res.status(500).json({
				error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
			});
		}
	};

	/**
	 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∂–∞—Ç–æ–µ)
	 */
	public previewImage = async (req: Request, res: Response) => {
		try {
			const { categorizedPlayerIds, categories, clubId } = req.body;

			if (!categorizedPlayerIds || !categories || !clubId) {
				res.status(400).json({
					error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
				});
				return;
			}

			const { imageBuffer } = await imageGenerationService.generateResultsImage(
				{
					categorizedPlayerIds,
					categories,
					clubId,
				},
				{ quality: 75, width: 550, height: 800 }, // –°–∂–∞—Ç–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–≤—å—é
			);

			res.set({
				'Content-Type': 'image/jpeg',
				'Content-Length': imageBuffer.length.toString(),
				'Cache-Control': 'no-cache',
			});

			res.send(imageBuffer);
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
				'IMAGE_GENERATION',
				error as Error,
			);
			res.status(500).json({
				error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
			});
		}
	};

	/**
	 * –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/—à—ç—Ä–∏–Ω–≥–∞
	 */
	public downloadImage = async (req: Request, res: Response) => {
		try {
			const { categorizedPlayerIds, categories, clubId } = req.body;

			if (!categorizedPlayerIds || !categories || !clubId) {
				res.status(400).json({
					error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
				});
				return;
			}

			console.log(
				'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º',
			);

			const { imageBuffer, club } =
				await imageGenerationService.generateResultsImage(
					{
						categorizedPlayerIds,
						categories,
						clubId,
					},
					{
						quality: 90, // –ï—â–µ –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫
						width: 550, // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫
						height: 800, // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
						optimizeForSpeed: false, // –û—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
					},
				);

			// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ ASCII –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞
			const safeClubName = club.name
				.replace(/[–∞-—è—ë]/gi, (char) => {
					// –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
					const map: { [key: string]: string } = {
						–∞: 'a',
						–±: 'b',
						–≤: 'v',
						–≥: 'g',
						–¥: 'd',
						–µ: 'e',
						—ë: 'e',
						–∂: 'zh',
						–∑: 'z',
						–∏: 'i',
						–π: 'y',
						–∫: 'k',
						–ª: 'l',
						–º: 'm',
						–Ω: 'n',
						–æ: 'o',
						–ø: 'p',
						—Ä: 'r',
						—Å: 's',
						—Ç: 't',
						—É: 'u',
						—Ñ: 'f',
						—Ö: 'h',
						—Ü: 'c',
						—á: 'ch',
						—à: 'sh',
						—â: 'sch',
						—ä: '',
						—ã: 'y',
						—å: '',
						—ç: 'e',
						—é: 'yu',
						—è: 'ya',
					};
					return map[char.toLowerCase()] || char;
				})
				.replace(/[^a-zA-Z0-9\s]/g, '') // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ASCII —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
				.replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
				.toLowerCase()
				.substring(0, 30); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

			const fileName = `tier-list-${safeClubName || 'club'}.jpg`;
			console.log(`üìÅ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${fileName}`);

			res.set({
				'Content-Type': 'image/jpeg',
				'Content-Length': imageBuffer.length.toString(),
				'Content-Disposition': `attachment; filename="${fileName}"`,
				'Cache-Control': 'private, max-age=3600', // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ —á–∞—Å
			});

			res.send(imageBuffer);
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:',
				error instanceof Error ? error.message : String(error),
			);
			res.status(500).json({
				error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
			});
		}
	};
}

// ShareController –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ index.ts —Å –ø–µ—Ä–µ–¥–∞—á–µ–π botService
