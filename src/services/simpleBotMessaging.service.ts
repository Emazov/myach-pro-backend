import { redisService } from './redis.service';
import { logger } from '../utils/logger';

interface ImageTask {
	id: string;
	chatId: number;
	imageBuffer: string; // base64
	caption: string;
	timestamp: number;
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Redis
 * –ò–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å IPC –≤ PM2 cluster mode
 */
export class SimpleBotMessagingService {
	private static instance: SimpleBotMessagingService;
	private botService: any = null;
	private isProcessingTasks = false;
	private taskProcessorInterval: NodeJS.Timeout | null = null;

	private constructor() {
		this.startTaskProcessor();
	}

	public static getInstance(): SimpleBotMessagingService {
		if (!SimpleBotMessagingService.instance) {
			SimpleBotMessagingService.instance = new SimpleBotMessagingService();
		}
		return SimpleBotMessagingService.instance;
	}

	/**
	 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ bot service (—Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ)
	 */
	public setBotService(botService: any) {
		this.botService = botService;
	}

	/**
	 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ
	 */
	private startTaskProcessor() {
		const isMasterProcess = process.env.pm_id === '0';

		if (isMasterProcess && !this.isProcessingTasks) {
			this.isProcessingTasks = true;

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º setInterval –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞
			this.taskProcessorInterval = setInterval(async () => {
				if (this.isProcessingTasks) {
					await this.processImageTasks();
				}
			}, 100);
		}
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ)
	 */
	private async processImageTasks() {
		const isMasterProcess = process.env.pm_id === '0';

		if (!isMasterProcess || !this.isProcessingTasks) return;

		try {
			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
			const taskData = await redisService.getClient().lpop('image_send_queue');

			if (taskData) {
				const task: ImageTask = JSON.parse(taskData);
				await this.handleImageTask(task);
			}
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
				'TELEGRAM_BOT',
				error as Error,
			);
		}
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	 */
	private async handleImageTask(task: ImageTask) {
		let success = false;
		let errorMessage = '';

		try {
			if (!this.botService?.isBotAvailable()) {
				errorMessage = 'Bot service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏';
				logger.error(errorMessage, 'TELEGRAM_BOT');
				return;
			}

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ Buffer
			const imageBuffer = Buffer.from(task.imageBuffer, 'base64');
			const imageSizeMB = imageBuffer.length / (1024 * 1024);

			logger.info(
				`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSizeMB.toFixed(
					2,
				)}MB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${task.chatId}`,
				'TELEGRAM_BOT',
			);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (TelegramBotService —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
			success = await this.botService.sendImage(
				task.chatId,
				imageBuffer,
				task.caption,
			);

			logger.imageSent(success, task.chatId.toString(), imageBuffer.length);
		} catch (error) {
			errorMessage = error instanceof Error ? error.message : String(error);
			logger.error(
				'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–µ',
				'TELEGRAM_BOT',
				error as Error,
			);
			logger.imageSent(false, task.chatId.toString());
		} finally {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis –¥–ª—è worker –ø—Ä–æ—Ü–µ—Å—Å–∞
			try {
				await redisService.getClient().setex(
					`image_result:${task.id}`,
					60, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TTL –¥–æ 60 —Å–µ–∫—É–Ω–¥
					JSON.stringify({
						success,
						timestamp: Date.now(),
						error: errorMessage || undefined,
					}),
				);
			} catch (redisError) {
				logger.error(
					'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Redis',
					'TELEGRAM_BOT',
					redisError as Error,
				);
			}
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
	 */
	public async sendImage(
		chatId: number,
		imageBuffer: Buffer,
		caption: string,
	): Promise<boolean> {
		const isMasterProcess = process.env.pm_id === '0';

		// –ï—Å–ª–∏ –º—ã –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
		if (isMasterProcess && this.botService?.isBotAvailable()) {
			try {
				const result = await this.botService.sendImage(
					chatId,
					imageBuffer,
					caption,
				);
				logger.imageSent(result, chatId.toString(), imageBuffer.length);
				return result;
			} catch (error) {
				logger.error(
					'–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ',
					'TELEGRAM_BOT',
					error as Error,
				);
				logger.imageSent(false, chatId.toString());
				return false;
			}
		}

		// –ï—Å–ª–∏ –º—ã –≤ worker –ø—Ä–æ—Ü–µ—Å—Å–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis –æ—á–µ—Ä–µ–¥—å
		try {
			const taskId = `${Date.now()}-${Math.random()}`;
			const task: ImageTask = {
				id: taskId,
				chatId,
				imageBuffer: imageBuffer.toString('base64'),
				caption,
				timestamp: Date.now(),
			};

			// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
			await redisService
				.getClient()
				.rpush('image_send_queue', JSON.stringify(task));

			// –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º 45 —Å–µ–∫—É–Ω–¥ - —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
			for (let i = 0; i < 450; i++) {
				const result = await redisService
					.getClient()
					.get(`image_result:${taskId}`);
				if (result) {
					const parsed = JSON.parse(result);
					await redisService.getClient().del(`image_result:${taskId}`);
					logger.imageSent(
						parsed.success === true,
						chatId.toString(),
						imageBuffer.length,
					);
					return parsed.success === true;
				}
				await new Promise((resolve) => setTimeout(resolve, 100));
			}

			logger.error(
				'–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
				'TELEGRAM_BOT',
			);
			logger.imageSent(false, chatId.toString());
			return false;
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å',
				'TELEGRAM_BOT',
				error as Error,
			);
			logger.imageSent(false, chatId.toString());
			return false;
		}
	}

	/**
	 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
	 */
	public stop() {
		this.isProcessingTasks = false;

		if (this.taskProcessorInterval) {
			clearInterval(this.taskProcessorInterval);
			this.taskProcessorInterval = null;
		}
	}
}

export const simpleBotMessagingService =
	SimpleBotMessagingService.getInstance();
